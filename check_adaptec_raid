#!/usr/bin/perl -w


use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use IPC::Run3;
use Data::Dumper;
use Switch;


our $VERBOSITY = 0;
our $VERSION = '0.0';
our $EXITSTATUS = 0;
use constant { 
	STATE_OK => 0,
	STATE_WARNING => 1,
	STATE_CRITICAL => 2,
	STATE_UNKNOWN => 3,
 };

# Returns StatusCode 0,1,2,3
sub myStatus {
	my $prevStatus = $_[0];
	my $nextStatus = $_[1];
	my $returnStatus = STATE_OK;
	if ($prevStatus >= $nextStatus) {
		$returnStatus = $prevStatus;
	} else {
		$returnStatus = $nextStatus;
	}
	
	return $returnStatus
}

sub myExit {
		print $_[1];
		exit ($_[2]);
}

sub displayUsage {
	#foobar strings
}

sub displayHelp {
	#foobar strings
}
 
sub displayVersion {
	# Get arcconf VERSION, controller name, + VERSION of plugin 
}

sub getControllerCfg {
	
	my $sudo = $_[0];
	my $arcconf = $_[1];
	my $controller = $_[2];
	my $temperature = $_[3];
	my $status = 0;
	my $statusMessage = "";
	my @output = `$sudo $arcconf GETCONFIG $controller AD`; #seems to parse every line in its own variable
	print Dumper(@output) if $VERBOSITY == 3;
	my %hash;
	my @linevalues;
	
	foreach my $line (@output) {
		if(index($line, ':') != -1) {
			@linevalues = split(/:/, $line);
			$linevalues[0] =~ s/^\s+|\s+$//g;
			$linevalues[1] =~ s/^\s+|\s+$//g;
			$hash{$linevalues[0]} = $linevalues[1];
			
			switch($linevalues[0]) {
				case "Controller Status" { 
					if ($linevalues[1] ne "Optimal") { 
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= ""; }
						if ($VERBOSITY == 1) {$statusMessage .= ""; }	
						if ($VERBOSITY == 2) {$statusMessage .= ""; }
						if ($VERBOSITY == 3) {$statusMessage .= ""; } 
					}
				}
				case "Defunct disk drive count" { 
					if ($linevalues[1] ne "0") { 
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= ""; }
						if ($VERBOSITY == 1) {$statusMessage .= ""; }	
						if ($VERBOSITY == 2) {$statusMessage .= ""; }
						if ($VERBOSITY == 3) {$statusMessage .= ""; } 
					}
				}
				case "Logical devices/Failed/Degraded" { 
					my $degrad = $linevalues[1] =~ s/^[0-9]+//g;
					if ($degrad ne "/0/0") { 
						$status = myStatus($status, STATE_WARNING);
						if ($VERBOSITY == 0) {$statusMessage .= ""; }
						if ($VERBOSITY == 1) {$statusMessage .= ""; }	
						if ($VERBOSITY == 2) {$statusMessage .= ""; }
						if ($VERBOSITY == 3) {$statusMessage .= ""; } 
					}
				}
				case "Temperature" {
					my ($temp) = $linevalues[1] =~ /(^[0-9]+)/;
					if ( $temp > $temperature) {
						$status = myStatus($status, STATE_CRITICAL); 
						if ($VERBOSITY == 0) {$statusMessage .= ""; }
						if ($VERBOSITY == 1) {$statusMessage .= ""; }	
						if ($VERBOSITY == 2) {$statusMessage .= ""; }
						if ($VERBOSITY == 3) {$statusMessage .= ""; } 
					}
				}
				case "Status" { 
					if ($linevalues[1] ne "ZMM Optimal") { 
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= ""; }
						if ($VERBOSITY == 1) {$statusMessage .= ""; }	
						if ($VERBOSITY == 2) {$statusMessage .= ""; }
						if ($VERBOSITY == 3) {$statusMessage .= ""; } 
					}
				}
			}
		}
		
	}
	# Wenn Status hier nu immer OK is dann print "Controller Status: OK
	if ($status eq 0) {
		print "Controller Status: OK";
	} else {
		print $statusMessage;
	}
	return $status
}


sub getPhysDevCfg {
	my $sudo = $_[0];
	my $arcconf = $_[1];
    my $controller = $_[2];
    my $devices = $_[3];
    my $devicenum = -1;
    my $status = 0;
    my $statusMessage = "";
    my @output = `$sudo $arcconf GETCONFIG $controller PD`;
    print Dumper(@output) if $VERBOSITY == 3;
    my %hash;
    my @linevalues;

    foreach my $line (@output) {
=begin comment
            ($devicenum) = $line =~ /(^[0-9]+)/;
            if ($devicenum ne -1) {
                    print "Device #".$devicenum."\n";
            }
            
            $txt = '        Device #0';

            if ($txt =~ m/(\tDevice #)([0-9]+)/is)
            {
               $word1=$1;
                $int1=$2;
                print "($word1) ($int1) \n";
            }
=cut
            if(index($line, ':') != -1) {
                    @linevalues = split(/:/, $line);
                    $linevalues[0] =~ s/^\s+|\s+$//g;
                    $linevalues[1] =~ s/^\s+|\s+$//g;
                    $hash{$linevalues[0]} = $linevalues[1];

                    switch($linevalues[0]) {
                            case "State" {
                                    if ($linevalues[1] ne "Online") {
                                            $status = myStatus($status, STATE_CRITICAL);
                                            if ($VERBOSITY == 0) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 1) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 2) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 3) {$statusMessage .= ""; }
                                    }
                            }
                            case "S.M.A.R.T." {
                                    if ($linevalues[1] ne "No") {
                                            $status = myStatus($status, STATE_CRITICAL);
                                            if ($VERBOSITY == 0) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 1) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 2) {$statusMessage .= ""; }
                                            if ($VERBOSITY == 3) {$statusMessage .= ""; }
                                    }
                            }
                    }
            }
    }
    # Wenn Status hier nu immer OK is dann print "Physical Device Status: OK
    if ($status eq 0) {
            print "Physical Device Status: OK";
    } else {
            print $statusMessage;
    }
    return $status
}


sub getLogDevCfg {
	
}


MAIN: {
	my $controller = 1;
	my @logDevices; 
	my @physDevices;
	my $sudo = ''; #check_arc all nopasswd: /usr/bin/arcconf GETCONFIG *
	my $arcconf = '';
	my $platform = $^O;
 	my $temperature = ''; 
	
	if ( !(GetOptions(
		'v|verbose' => sub {$VERBOSITY = 1 },
		'vv' => sub {$VERBOSITY = 2},
		'vvv' => sub {$VERBOSITY = 3},
		'h|help' => sub {displayHelp();},
		'V|version' => sub {displayVersion();},
		'C|controller=i' => \$controller,
		'LD|logicaldevice=i@' => \@logDevices,
		'PD|physicaldevice=i@' => \@physDevices, 
		'T|temperature=s' => \$temperature,
		'p|path=s' => \$arcconf 
	)))	{
		displayUsage();
	}

	# check platform
	if ($platform eq 'linux') {
		chomp($sudo= `which sudo`);
		if ($arcconf eq '') {
			$arcconf = '/usr/bin/arcconf';
		}
		unless ( -e $arcconf && -x $sudo ) { print "Permission denied or file not found!\n"; die; }
	} else {
		$sudo = '';
		if ($arcconf eq '') {
			$arcconf = 'C:\Programme\Adaptec\RemoteArcconf\arcconf.exe';
		}
		unless ( -e $arcconf ) { print "Executable not found!\n"; die; }
	}
	#getControllerCfg($sudo, $arcconf, $controller, $temperature);
	#getPhysDevCfg($sudo, $arcconf, $controller, @physDevices);
}
