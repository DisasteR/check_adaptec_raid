#!/usr/bin/perl -w


use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Data::Dumper;
use Switch;


our $VERBOSITY = 0;
our $VERSION = '0.0';
our $EXITSTATUS = 0;
use constant { 
	STATE_OK => 0,
	STATE_WARNING => 1,
	STATE_CRITICAL => 2,
	STATE_UNKNOWN => 3,
 };

# Returns StatusCode 0,1,2,3
sub myStatus {
	my $prevStatus = $_[0];
	my $nextStatus = $_[1];
	my $returnStatus = STATE_OK;
	if ($prevStatus >= $nextStatus) {
		$returnStatus = $prevStatus;
	} else {
		$returnStatus = $nextStatus;
	}
	
	return $returnStatus
}

sub myExit {
		print $_[1];
		exit ($_[2]);
}

sub displayUsage {
	#foobar strings
}

sub displayHelp {
	#foobar strings
}
 
sub displayVersion {
	# Get arcconf VERSION, controller name, + VERSION of plugin 
}


sub getControllerCfg {
	
	my $sudo = $_[0];
	my $arcconf = $_[1];
	my $controller = $_[2];
	my $temperature = $_[3];
	my $zmm = $_[4];
	my $status = 0; # Return Status
	my $statusMessage = "Controller Status "; # Return String
	my @output = `$sudo $arcconf GETCONFIG $controller AD`; #seems to parse every line in its own variable
	my %hash;
	my @linevalues;
	
	foreach my $line (@output) {
		if(index($line, ':') != -1) {
			@linevalues = split(/:/, $line);
			$linevalues[0] =~ s/^\s+|\s+$//g;
			$linevalues[1] =~ s/^\s+|\s+$//g;
			$hash{$linevalues[0]} = $linevalues[1];
			
			switch($linevalues[0]) {
				# Overall Controller Status
				case "Controller Status" { 
					if ($linevalues[1] ne "Optimal") { 
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= "CRITICAL: Controller Status not Optimal"; }
						if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: The Controller Status is not running Optimal"; }	
					}
				}
				# Defunctional disks
				case "Defunct disk drive count" { 
					if ($linevalues[1] ne "0") { 
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= "CRITICAL: Defunctional Disks "; }
						if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Defunctional Disk Count: " . $linevalues[1] . ". "; }
					}
				}
				
				# Logical Devices total/failed/degraded
				case "Logical devices/Failed/Degraded" { 
					my $degrad = $linevalues[1] =~ s/^[0-9]+//g;
					my $totalDisks = $linevalues[1] =~ /(^[0-9]+)/;
					#### NEED TESTING!!!!! ####
					my $totalDegraded = $degrad =~ /.*?\d+.*?\d+.*?(\\d+)/; # not yet tested
					my $totalFailed = $linevalues[1] =~ /.*?\d+.*?(\\d+)/; # not tested either
					if ($degrad ne "/0/0") { 
						$status = myStatus($status, STATE_WARNING);
						if ($VERBOSITY == 0) {$statusMessage .= "WARNING: Disks Failed/Degraded. "; }
						if ($VERBOSITY == 1) {$statusMessage .= "WARNING: Disks have Failed or the Raid is degraded. "; }	
						if ($VERBOSITY >= 2) {$statusMessage .= "\nWARNING: Disks have Failed or the Raid is degraded:
(Total Disks:". $totalDisks . ", Failed: " . $totalFailed . ", Degraded: " . $totalDegraded . ") " }
					}
				}
				
				# Warning if temperature is over the set Threshold 
				# Critical if 20% over the set Threshold (Will be configureable in the future)
				# http://nagiosplug.sourceforge.net/developer-guidelines.html#THRESHOLDFORMAT
				case "Temperature" {
					my ($temp) = $linevalues[1] =~ /(^[0-9]+)/;
					my $criticalTemp = $temperature + (2 x( $temperature / 10 ));
					if ( $temp > $criticalTemp) {
						$status = myStatus($status, STATE_CRITICAL);
						if ($VERBOSITY == 0) {$statusMessage .= "CRITICAL: Temperature critical: " . $temp . " C. "; }
						if ($VERBOSITY == 1) {$statusMessage .= "CRITICAL: Temperature critical: (20% over threshold): " . $temp . " C. "; }	
						if ($VERBOSITY >= 2) {$statusMessage .= "\nCRITICAL: Temperature critical: (20% over threshold: ". $criticalTemp . "C):" . $temp . " C. "; }
					} elsif ($temp > $temperature) {
						$status = myStatus($status, STATE_WARNING);
						if ($VERBOSITY == 0) {$statusMessage .= "WARNING: Temperature Warning:" . $temp . " C. "; }
						if ($VERBOSITY == 1) {$statusMessage .= "WARNING: Temperature Warning(Threshold: ". $temperature. "C): " . $temp . " C. "; }
						if ($VERBOSITY >= 2) {$statusMessage .= "\nWARNING: Temperature Warning(Threshold: ". $temperature. ", Critical Threshold:". $criticalTemp ."C ):" . $temp . " C. "; }
					} 

					
				}
				
				# Zero Maintenance Module
				case "Status" { 
					if ( $zmm == 1) {
						if ($linevalues[1] ne "ZMM Optimal") { 
							$status = myStatus($status, STATE_CRITICAL);
							if ($VERBOSITY == 0) {$statusMessage .= "CRITICAL: ZMM Not Optimal!"; }
							if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Zero Maintenance Module Error or Module not found!"; }	
						}
					}
				}
			}
		}
		
	}
	
	# Wenn Status hier nu immer OK is dann print "Controller Status: OK
	if ($status eq 0) {
		print $statusMessage . "OK";
	} else {
		print $statusMessage;
	}
	return $status
}


sub getPhysDevCfg {
	my $sudo = $_[0];
	my $arcconf = $_[1];
    my $controller = $_[2];
    my @devices = $_[3];
    my $devicenum = -1;
    my $status = 0;
    my $statusMessage = "Physical Device Status: ";
    my @faildevices;
    #my @output = `$sudo $arcconf GETCONFIG $controller PD`;
    my @output = `cat /home/mgrubhofer/git/check_adaptec_raid/arcconf_output/physical_output_fails`;
    my %hash;
    my @linevalues;
    foreach my $line (@output) {
        if($line =~ /(Device #)([0-9]+)/) {
        	if(!defined($devices[0])) {
        		# keine devices explizit angegeben, überprüfe alle
        		$devicenum = $2;
        	} else {
    			# es sind devices angegeben, prüfe nur die
        		if(grep {$_ eq $2} @devices) {
        			# das aktuell gefundene soll geprüft werden
        			$devicenum = $2;
        		} else { 
        			# das aktuelle soll übersprungen werden
        			$devicenum = -1;
        		}
        	}
        }
        if($devicenum ne -1 && index($line, ':') != -1) {
            @linevalues = split(/:/, $line);
            $linevalues[0] =~ s/^\s+|\s+$//g;
            $linevalues[1] =~ s/^\s+|\s+$//g;
            $hash{$linevalues[0]} = $linevalues[1];

            switch($linevalues[0]) {
                case "State" {
                    if ($linevalues[1] ne "Online") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                        $status = myStatus($status, STATE_CRITICAL);
                        if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Disk $devicenum is not online."; }
                    }
                }
                case "S.M.A.R.T." {
                    if ($linevalues[1] ne "No") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                    	$status = myStatus($status, STATE_CRITICAL);
                        if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Disk $devicenum: S.M.A.R.T. error."; }
                    }
                }
                case "S.M.A.R.T. warnings" {
                    if ($linevalues[1] ne "0") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                        $status = myStatus($status, STATE_WARNING);
                        if ($VERBOSITY == 1) {$statusMessage .= "WARNING: Disk $devicenum: S.M.A.R.T. warning."; }
                        if ($VERBOSITY >= 2) {$statusMessage .= "WARNING: Disk $devicenum: S.M.A.R.T. warnings is more than zero."; }
                    }
                }
                case "Failed logical device segments" {
                	if ($linevalues[1] eq "True") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                        $status = myStatus($status, STATE_CRITICAL);
                        if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Disk $devicenum has failed logical device segments."; }
                	}
                }
            }
        }
    }
    my $faildevicenum = scalar(@faildevices);
    if ($VERBOSITY eq 0 && $faildevicenum > 0) {
    	if ($status eq 1) {
    		$statusMessage = "WARNING: Problems with $faildevicenum physical disk(s).";
    	} else {
    		$statusMessage = "CRITICAL: Problems with $faildevicenum physical disk(s)."
    	}
    }
    # Wenn Status hier nu immer OK is dann print "Physical Device Status: OK"
	if ($status eq 0) {
		print $statusMessage . "OK";
	} else {
		print $statusMessage;
	}
    return $status
}


sub getLogDevCfg {
	my $sudo = $_[0];
	my $arcconf = $_[1];
    my $controller = $_[2];
    my @devices = $_[3];
    my $devicenum = -1;
    my $status = 0;
    my $statusMessage = "Logical Device Status: ";
    my @faildevices;
    #my @output = `$sudo $arcconf GETCONFIG $controller LD`;
    my @output = `cat /home/mgrubhofer/git/check_adaptec_raid/arcconf_output/logical_all_output`;
    my %hash;
    my @linevalues;
    foreach my $line (@output) {
        if($line =~ /(Logical device number )([0-9]+)/) {
        	if(!defined($devices[0])) {
        		# keine devices explizit angegeben, überprüfe alle
        		$devicenum = $2;
        	} else {
    			# es sind devices angegeben, prüfe nur die
        		if(grep {$_ eq $2} @devices) {
        			# das aktuell gefundene soll geprüft werden
        			$devicenum = $2;
        		} else { 
        			# das aktuelle soll übersprungen werden
        			$devicenum = -1;
        		}
        	}
        }
        if($devicenum ne -1 && index($line, ':') != -1) {
            @linevalues = split(/:/, $line);
            $linevalues[0] =~ s/^\s+|\s+$//g;
            $linevalues[1] =~ s/^\s+|\s+$//g;
            $hash{$linevalues[0]} = $linevalues[1];

            switch($linevalues[0]) {
                case "Status of logical device" {
                    if ($linevalues[1] ne "Optimal") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                        $status = myStatus($status, STATE_CRITICAL);
                        if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Status of logical disk $devicenum is not optimal."; }
                    }
                }
                case "Failed stripes" {
                    if ($linevalues[1] ne "No") {
                    	if (scalar(@faildevices) eq 0 || !grep {$_ eq $devicenum} @faildevices) {
                    		push(@faildevices, $devicenum);
                    	}
                    	$status = myStatus($status, STATE_CRITICAL);
                        if ($VERBOSITY >= 1) {$statusMessage .= "CRITICAL: Logical disk $devicenum has failed stripes."; }
                    }
                }
            }
        }
    }
    my $faildevicenum = scalar(@faildevices);
    if ($VERBOSITY eq 0 && $faildevicenum > 0) {
    	if ($status eq 1) {
    		$statusMessage = "WARNING: Problems with $faildevicenum logical disk(s).";
    	} else {
    		$statusMessage = "CRITICAL: Problems with $faildevicenum logical disk(s)."
    	}
    }
    # Wenn Status hier nu immer OK is dann print "Physical Device Status: OK"
	if ($status eq 0) {
		print $statusMessage . "OK";
	} else {
		print $statusMessage;
	}
    return $status
}


MAIN: {
	my $controller = 1;
	my @logDevices; 
	my @physDevices;
	my $sudo = ''; # check_arc all nopasswd: /usr/bin/arcconf GETCONFIG *
	my $arcconf = '';
	my $platform = $^O;
 	my $temperature = 40; 
 	my $zmm = 1; # boolean
	
	if ( !(GetOptions(
		'v|verbose' => sub {$VERBOSITY = 1 },
		'vv' => sub {$VERBOSITY = 2},
		'vvv' => sub {$VERBOSITY = 3},
		'h|help' => sub {displayHelp();},
		'V|version' => sub {displayVersion();},
		'C|controller=i' => \$controller,
		'LD|logicaldevice=s{,}' => \@logDevices,
		'PD|physicaldevice=s{,}' => \@physDevices, 
		'T|temperature=s' => \$temperature,
		'p|path=s' => \$arcconf,
		'z|ZMM' => \$zmm
	)))	{
		displayUsage();
	}

	# check platform
	if ($platform eq 'linux') {
		chomp($sudo= `which sudo`);
		if ($arcconf eq '') {
			$arcconf = '/usr/bin/arcconf';
		}
		#unless ( -e $arcconf && -x $sudo ) { print "Permission denied or file not found!\n"; die; }
	} else {
		$sudo = '';
		if ($arcconf eq '') {
			$arcconf = 'C:\Programme\Adaptec\RemoteArcconf\arcconf.exe';
		}
		unless ( -e $arcconf ) { print "Executable not found!\n"; die; }
	}
	#getControllerCfg($sudo, $arcconf, $controller, $temperature, $zmm);
	#getPhysDevCfg($sudo, $arcconf, $controller, @physDevices);
	getLogDevCfg($sudo, $arcconf, $controller, @logDevices);
}
